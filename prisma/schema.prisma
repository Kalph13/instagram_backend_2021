// Prisma at a Glance (Older Version)
// Blog 1: https://berkbach.com/prisma2-%EC%82%AC%EC%9A%A9%EA%B8%B0-70c8517539d
// Blog 2: https://velog.io/@ltnscp9028/Prisma-%EB%84%8C-%EB%88%84%EA%B5%AC%EB%8B%88-gr0ecme3

// How to Use Prisma (https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgres)
// (1) Add Prisma CLI: npm install prisma --save-dev
// (2) Invoke Prisma CLI: npx prisma
// (3) Create Prisma Schema (schema.prisma, env.): npx prisma init
// (4) Install PostGRE & Connect DB: Modify '.env'
//     - Ref: https://velog.io/@ryong9rrr/Prisma-PostgreSQL-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0)
// (5) Prisma Migrate: npx prisma migrate dev --name init
//     - Ref: https://velog.io/@ryong9rrr/Prisma-PostgreSQL-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0
// (6) Prisma Client: npm install @prisma/client
//     - Create Prisma Client: const client = new PrismaClient();
//     - https://velog.io/@ryong9rrr/3.-Apollo-server-postgreSQL-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0-prisma-client
// (7) When the Schema Has a Change: npx prisma migrate dev (Automatically Invokes 'prisma generate')
//     - Must Invoke 'prisma generate' and Update the Prisma Client When the Prisma Schema Has a Change (IMPORTANT!)
// (8) Prisma Introspect: npx prisma db pull â†’ npx prisma generate
//     - Update Prisma Schema When the DB Has a Change
// (8) Prisma Studio: npx prisma studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma Tutorial
// model movie {
//  id       Int      @id @default(autoincrement())
//  title    String
//  year     Int
//  genre    String?
//  createAt DateTime @default(now())
//  updateAt DateTime @updatedAt
// }

// Relations (https://www.prisma.io/docs/concepts/components/prisma-schema/relations)
model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String?
  username  String    @unique
  email     String    @unique
  password  String
  bio       String?
  avatar    String?
  // Relation Fields (photos, followers, following) Don't Exist in the DB
  photos    Photo[]
  likes     Like[]
  comments  Comment[]
  // Many-to-Many Self-relation (https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations)
  // Must Define Attribute ("FollowRelation")
  followers User[]    @relation("FollowRelation", references: [id])
  following User[]    @relation("FollowRelation", references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// One-to-Many Relations (https://www.prisma.io/docs/concepts/components/prisma-schema/relations/one-to-many-relations)
model Photo {
  id        Int       @id @default(autoincrement())
  // Relation Fields (user, userID) Don't Exist in the DB
  // 'userID' References the 'id' of User (Connect Photo 'userID' - User 'id' )
  user      User?     @relation(fields: [userID], references: [id], onDelete: SetNull)
  userID    Int
  file      String
  caption   String?
  hashtags  Hashtag[]
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Hashtag {
  id        Int      @id @default(autoincrement())
  tag       String   @unique
  photos    Photo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  photo     Photo?   @relation(fields: [photoID], references: [id], onDelete: SetNull)
  photoID   Int?
  user      User?    @relation(fields: [userID], references: [id], onDelete: SetNull)
  userID    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // @unique: Define a Unique Constraint for This Field
  // @@unique: Define a Unique 'Compound' Constraint for the Specified Fields
  // A Certain User Can Like a Certain Photo Only Once //
  @@unique([photoID, userID])
}

model Comment {
  id        Int      @id @default(autoincrement())
  payload   String
  user      User?    @relation(fields: [userID], references: [id], onDelete: SetNull)
  userID    Int?
  photo     Photo?   @relation(fields: [photoID], references: [id], onDelete: SetNull)
  photoID   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
